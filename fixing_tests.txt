remove:
const \{(.*)\} = require\('mocha'\)

replace:
const (.*) require\(path.join\(__dirname, '/../lib'\)\)(.*)
const {r} = require(path.join(__dirname, '/../lib'))

replace:
(.*)rethinkdbdash\(config\)
await r.connectPool(config)

remove:
var Promise = require('bluebird');
Promise.coroutine.addYieldHandler(function(yieldedValue) {
  if (Array.isArray(yieldedValue)) return Promise.all(yieldedValue);
});

replace:
require(path.join(__dirname, '/../lib'))({
await r.connectPool({

replace:
it('If `servers` is specified, it cannot be empty', function () {
it('If `servers` is specified, it cannot be empty', async () => {

replace:
let r,
let

replace:
0 argument,
0 arguments,

replace:
r.row
row => row

replace:
).error(
).catch(

replace
await r.db(dbName).table(tableName).insert({ id: 0 })
await r.db(dbName).table(tableName).insert({ id: 0 }).run()

replace
run({ cursor: true })
getCursor()

replace
run\(\{ cursor: true,(.*)\}\)
getCursor({ $1 })

replace
cursor.result.toArray()
cursor.toArray()

replace
run\((.*)cursor: true,(.*)
getCursor($1$2

replace
.on('end', resolve)
.on('data', () => null).on('end', resolve)

remove
let r$
